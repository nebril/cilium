// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dnsproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FQNDCollectorClient is the client API for FQNDCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FQNDCollectorClient interface {
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of FQDNMapping
	ProvideMappings(ctx context.Context, opts ...grpc.CallOption) (FQNDCollector_ProvideMappingsClient, error)
}

type fQNDCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewFQNDCollectorClient(cc grpc.ClientConnInterface) FQNDCollectorClient {
	return &fQNDCollectorClient{cc}
}

func (c *fQNDCollectorClient) ProvideMappings(ctx context.Context, opts ...grpc.CallOption) (FQNDCollector_ProvideMappingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FQNDCollector_serviceDesc.Streams[0], "/dnsproxy.FQNDCollector/ProvideMappings", opts...)
	if err != nil {
		return nil, err
	}
	x := &fQNDCollectorProvideMappingsClient{stream}
	return x, nil
}

type FQNDCollector_ProvideMappingsClient interface {
	Send(*FQDNMapping) error
	CloseAndRecv() (*Success, error)
	grpc.ClientStream
}

type fQNDCollectorProvideMappingsClient struct {
	grpc.ClientStream
}

func (x *fQNDCollectorProvideMappingsClient) Send(m *FQDNMapping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fQNDCollectorProvideMappingsClient) CloseAndRecv() (*Success, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Success)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FQNDCollectorServer is the server API for FQNDCollector service.
// All implementations must embed UnimplementedFQNDCollectorServer
// for forward compatibility
type FQNDCollectorServer interface {
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of FQDNMapping
	ProvideMappings(FQNDCollector_ProvideMappingsServer) error
	mustEmbedUnimplementedFQNDCollectorServer()
}

// UnimplementedFQNDCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedFQNDCollectorServer struct {
}

func (*UnimplementedFQNDCollectorServer) ProvideMappings(FQNDCollector_ProvideMappingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProvideMappings not implemented")
}
func (*UnimplementedFQNDCollectorServer) mustEmbedUnimplementedFQNDCollectorServer() {}

func RegisterFQNDCollectorServer(s *grpc.Server, srv FQNDCollectorServer) {
	s.RegisterService(&_FQNDCollector_serviceDesc, srv)
}

func _FQNDCollector_ProvideMappings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FQNDCollectorServer).ProvideMappings(&fQNDCollectorProvideMappingsServer{stream})
}

type FQNDCollector_ProvideMappingsServer interface {
	SendAndClose(*Success) error
	Recv() (*FQDNMapping, error)
	grpc.ServerStream
}

type fQNDCollectorProvideMappingsServer struct {
	grpc.ServerStream
}

func (x *fQNDCollectorProvideMappingsServer) SendAndClose(m *Success) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fQNDCollectorProvideMappingsServer) Recv() (*FQDNMapping, error) {
	m := new(FQDNMapping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FQNDCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dnsproxy.FQNDCollector",
	HandlerType: (*FQNDCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProvideMappings",
			Handler:       _FQNDCollector_ProvideMappings_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dnsproxy.proto",
}
