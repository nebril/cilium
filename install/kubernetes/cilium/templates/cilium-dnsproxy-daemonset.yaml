{{- if and (.Values.agent) (not .Values.preflight.enabled) }}

{{- /*  Default values with backwards compatibility */ -}}
{{- $defaultKeepDeprecatedProbes := "true" -}}

{{- /* Default values when 1.8 was initially deployed */ -}}
{{- if semverCompare ">=1.8" (default "1.8" .Values.upgradeCompatibility) -}}
{{- $defaultKeepDeprecatedProbes = "false" -}}
{{- end -}}

{{- /* Workaround so that we can set the minimal k8s version that we support */ -}}
{{- $k8sVersion := .Capabilities.KubeVersion.Version -}}
{{- $k8sMajor := .Capabilities.KubeVersion.Major -}}
{{- $k8sMinor := .Capabilities.KubeVersion.Minor -}}

{{- if .Values.Capabilities -}}
{{- if .Values.Capabilities.KubeVersion -}}
{{- if .Values.Capabilities.KubeVersion.Version -}}
{{- $k8sVersion = .Values.Capabilities.KubeVersion.Version -}}
{{- if .Values.Capabilities.KubeVersion.Major -}}
{{- $k8sMajor = toString (.Values.Capabilities.KubeVersion.Major) -}}
{{- if .Values.Capabilities.KubeVersion.Minor -}}
{{- $k8sMinor = toString (.Values.Capabilities.KubeVersion.Minor) -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium-dnsproxy
{{- if .Values.keepDeprecatedLabels }}
    kubernetes.io/cluster-service: "true"
{{- if and (eq .Release.Namespace "kube-system" ) .Values.gke.enabled }}
{{- fail "Invalid configuration: Installing Cilium on GKE with 'kubernetes.io/cluster-service' labels on 'kube-system' namespace causes Cilium DaemonSet to be removed by GKE. Either install Cilium on a different Namespace or install with '--set keepDeprecatedLabels=false'"}}
{{- end }}
{{- end }}
  name: cilium-dnsproxy
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      k8s-app: cilium-dnsproxy
{{- if .Values.keepDeprecatedLabels }}
      kubernetes.io/cluster-service: "true"
{{- end }}
{{- with .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml . | trim | nindent 4 }}
{{- end }}
  template:
    metadata:
      annotations:
{{- if and .Values.prometheus.enabled (not .Values.prometheus.serviceMonitor.enabled) }}
        prometheus.io/port: "{{ .Values.prometheus.port }}"
        prometheus.io/scrape: "true"
{{- end }}
{{- if .Values.rollOutCiliumPods }}
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: {{ include (print $.Template.BasePath "/cilium-configmap.yaml") . | sha256sum | quote }}
{{- end }}
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
{{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        k8s-app: cilium-dnsproxy
{{- if .Values.keepDeprecatedLabels }}
        kubernetes.io/cluster-service: "true"
{{- end }}
{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
{{- end }}
    spec:
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
{{- end }}
      containers:
      - command:
        - dnsproxy
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
{{- if .Values.k8sServiceHost }}
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.k8sServiceHost | quote }}
{{- end }}
{{- if .Values.k8sServicePort }}
        - name: KUBERNETES_SERVICE_PORT
          value: {{ .Values.k8sServicePort | quote }}
{{- end }}
{{- with .Values.extraEnv }}
{{ toYaml . | trim | indent 8 }}
{{- end }}
        image: docker.io/nebril/cilium-dnsproxy-image-dev:882bc18c6-dev-wip
        imagePullPolicy: Always
{{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
{{- end }}
        name: cilium-dnsproxy
{{- if or .Values.prometheus.enabled .Values.hubble.metrics.enabled }}
        ports:
{{- if .Values.prometheus.enabled }}
        - containerPort: {{ .Values.prometheus.port }}
          hostPort: {{ .Values.prometheus.port }}
          name: prometheus
          protocol: TCP
{{- if .Values.proxy.prometheus.enabled }}
        - containerPort: {{ .Values.proxy.prometheus.port }}
          hostPort: {{ .Values.proxy.prometheus.port }}
          name: envoy-metrics
          protocol: TCP
{{- end }}
{{- end }}
{{- end }}
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: {{ .Values.cni.hostConfDirMountPath }}
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
{{- if and ( .Values.encryption.enabled ) ( eq .Values.encryption.type "ipsec" ) }}
  {{- if .Values.encryption.ipsec.mountPath }}
        - mountPath: {{ .Values.encryption.ipsec.mountPath }}
  {{- else }}
        - mountPath: {{ .Values.encryption.mountPath }}
  {{- end }}
          name: cilium-ipsec-secrets
{{- end }}
{{- if .Values.kubeConfigPath }}
        - mountPath: {{ .Values.kubeConfigPath }}
          name: kube-config
          readOnly: true
{{- end }}
{{- if .Values.bgp.enabled }}
        - mountPath: /var/lib/cilium/bgp
          name: bgp-config-path
          readOnly: true
{{- end }}
{{- range .Values.extraHostPathMounts }}
        - mountPath: {{ .mountPath }}
          name: {{ .name }}
          readOnly: {{ .readOnly }}
{{- if .mountPropagation }}
          mountPropagation: {{ .mountPropagation }}
{{- end }}
{{- end }}
      hostNetwork: true
      restartPolicy: Always
{{- if and (or (and (eq .Release.Namespace "kube-system") (gt $k8sMinor "10")) (ge $k8sMinor "17") (gt $k8sMajor "1")) .Values.enableCriticalPriorityClass }}
      priorityClassName: system-node-critical
{{- end }}
      serviceAccount: {{ .Values.serviceAccounts.cilium.name | quote }}
      serviceAccountName: {{ .Values.serviceAccounts.cilium.name | quote }}
      terminationGracePeriodSeconds: 1
{{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | trim | nindent 6 }}
{{- end }}
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: {{ .Values.daemon.runPath }}
          type: DirectoryOrCreate
        name: cilium-run
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.containerRuntime.integration "crio") }}
        # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
{{- end }}
{{- if .Values.cgroup.autoMount.enabled }}
      # To mount cgroup2 filesystem on the host
      - hostPath:
          path: /proc/1/ns
          type: Directory
        name: host-proc-ns
{{- end }}
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - hostPath:
          path: {{ .Values.cgroup.hostRoot}}
          type: DirectoryOrCreate
        name: cilium-cgroup
      # To install cilium cni plugin in the host
      - hostPath:
          path:  {{ .Values.cni.binPath }}
          type: DirectoryOrCreate
        name: cni-path
        # To install cilium cni configuration in the host
      - hostPath:
          path: {{ .Values.cni.confPath }}
          type: DirectoryOrCreate
        name: etc-cni-netd
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
{{- if .Values.kubeConfigPath }}
      - hostPath:
          path: {{ .Values.kubeConfigPath }}
          type: FileOrCreate
        name: kube-config
{{- end }}
{{- if and .Values.nodeinit.enabled (not (eq .Values.nodeinit.bootstrapFile "")) }}
      - hostPath:
          path: {{ .Values.nodeinit.bootstrapFile }}
          type: FileOrCreate
        name: cilium-bootstrap-file
{{- end }}
{{- range .Values.extraHostPathMounts }}
      - name: {{ .name }}
        hostPath:
          path: {{ .hostPath }}
{{- if .hostPathType }}
          type: {{ .hostPathType }}
{{- end }}
{{- end }}
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
{{- if and .Values.ipMasqAgent .Values.ipMasqAgent.enabled }}
      - configMap:
          name: ip-masq-agent
          optional: true
          items:
          - key: config
            path: ip-masq-agent
        name: ip-masq-agent
{{- end }}
{{- if and ( .Values.encryption.enabled ) ( eq .Values.encryption.type "ipsec" ) }}
      - name: cilium-ipsec-secrets
        secret:
  {{- if .Values.encryption.ipsec.secretName }}
          secretName: {{ .Values.encryption.ipsec.secretName }}
  {{- else }}
          secretName: {{ .Values.encryption.secretName }}
  {{- end }}
{{- end }}
{{- if .Values.cni.configMap }}
      - name: cni-configuration
        configMap:
          name: {{ .Values.cni.configMap }}
{{- end }}
{{- if .Values.bgp.enabled }}
      - configMap:
          name: bgp-config
        name: bgp-config-path
{{- end }}
{{- end }}
